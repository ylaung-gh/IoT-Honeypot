input {

	#pipe {
	#	type => "honeypot_mirroring"
	#	command => "tshark -i enx00e04c688c42 -T ek -J 'https http ssh rtsp icmp tcp udp ip'"
	#}
	
	file {
		#path          => ["/home/honeypot/jsons/**/*.json"] # ** would scan all subdirs under 'jsons'
		#path           => ["/home/honeypot/honeypot-jsons/**/*.json"]
        #path           => ["/media/honeypot/Data/Y1_20200904/zip/45.144.28.13/*.json"]		
		path           => ["/media/honeypot/Data/honeypot-jsons-elk/**/*.json"]
		mode           => "read"
		max_open_files => 32768
		start_position => "beginning"
		#sincedb_path   => "/dev/null"
		sincedb_path   => "/media/honeypot/Data/elk/logstash-7.5.0/data/plugins/inputs/file/.sincedb_707d95a4a28882be2c468506e2f94ce7"
		type           => "honeypot_pcap"
	}
}

filter {
	if [type] == "honeypot_mirroring" {		
		if [message] =~ /^{.*}$/ {
			json {
				source => message
				target => "honeypot_mirror"
			}
		}
		# Check if the 'layers' field exists and only then mutate the data
		# We extract only required fields here
		mutate {
			replace => [ "message", "%{message}" ]
			gsub => [ 'message','\n','']
		}
		# If TCP layer is there, that means even IP would be there
		if [honeypot_mirror][layers][ip] {
			mutate {
				add_field => {
					"mirror_src_ip" => "%{[honeypot_mirror][layers][ip][ip_ip_src]}"
					"mirror_dst_ip" => "%{[honeypot_mirror][layers][ip][ip_ip_dst]}"
					"mirror_ip_text" => "%{[honeypot_mirror][layers][ip][ip_text]}"
				}
			}

			#geoip {
		    #   source => "[honeypot_mirror][layers][ip][ip_ip_dst]"
			#	target => "mirror_dst_geoip"
			#	fields => ["city_name", "continent_code", "country_name", "ip", "latitude", "longitude", "location"]
			#}

			cidr {
				address => [ "%{mirror_dst_ip}" ]
				network => [ "10.0.64.0/18", "10.1.64.0/18", "169.254.0.0/16", "192.168.0.0/16", "fe80::/64" ]
				add_tag => [ "dst_ip_local" ]
			}

			if [honeypot_mirror][layers][tcp] {
				mutate {
					add_field => {
						"mirror_tcp_src_port" => "%{[honeypot_mirror][layers][tcp][tcp_tcp_srcport]}"
						"mirror_tcp_dst_port" => "%{[honeypot_mirror][layers][tcp][tcp_tcp_dstport]}"
						"mirror_tcp_filtered" => "%{[honeypot_mirror][layers][tcp][filtered]}"
						"mirror_tcp_flags" => "%{[honeypot_mirror][layers][tcp][tcp_tcp_flags]}"
						"mirror_tcp_stream" => "%{[honeypot_mirror][layers][tcp][tcp_tcp_stream]}"
					}
				}
				mutate {
					convert => {
						"mirror_tcp_src_port" => "integer"
						"mirror_tcp_dst_port" => "integer"
					}
				}
				translate {
					field => "mirror_tcp_flags"
					destination => "mirror_tcp_flags"
					override => "true"
					dictionary_path => "/media/honeypot/Data/elk/logstash-7.5.0/config/tcp_flags_dict.yml"
				}
				if [mirror_tcp_flags] == "SYN"  and !("dst_ip_local" in [tags])
				{
		    		geoip {
		        		source => "[honeypot_mirror][layers][ip][ip_ip_dst]"
						target => "mirror_dst_geoip"
						fields => ["city_name", "continent_code", "country_name", "ip", "latitude", "longitude", "location"]
		    		}
				}
				if [honeypot_mirror][layers][http] {
					if [honeypot_mirror][layers][http][http_http_authorization] {
						grok {
							match => ["[honeypot_mirror][layers][http][http_http_authorization]","%{GREEDYDATA} %{GREEDYDATA:mirror_b64_http_creds}"]
						}
						ruby {
							init => "require 'base64'"
							code => "
								if event.get('mirror_b64_http_creds')
								a = Base64.decode64(event.get('mirror_b64_http_creds'))
								event.set('mirror_http_creds', a)
							end"
						}
						# translate {
						#   field           => "wormhole_ip"
						#   destination     => "expected_creds"
						#   dictionary_path => "/home/honeypot/elk_530/logstash-5.3.0/config/yaml/wormhole_credentials.yml"
						# }
						# if [http_creds] != [expected_creds] {
						#   mutate {
						#      add_field => {
						#         "unsuccessful_login" => "%{[http_creds]}"
						#      }
						#   }
						# }
						# if [http_creds] == [expected_creds] {
						#   mutate {
						#     add_field => {
						#         "successful_login" => "%{[http_creds]}"
						#      }
						#   }
						# }
						mutate {
							add_field => {
								"mirror_raw_http_data" => "%{[honeypot_mirror][layers][http]}"
							}
						}
					}

					if [honeypot_mirror][layers][http][http_http_request_full_uri] {
						mutate {
							add_field => {
								"mirror_http_requested_uri" => "%{[honeypot_mirror][layers][http][http_http_request_full_uri]}"
							}
						}
					}
					if [honeypot_mirror][layers][http][http_http_user_agent] {
						mutate {
							add_field => {
								"mirror_http_user_agent" => "%{[honeypot_mirror][layers][http][http_http_user_agent]}"
							}
						}
					}
				}
			}
			if [honeypot_mirror][layers][udp] {
				mutate {
					add_field => {
						"mirror_udp_src_port" => "%{[honeypot_mirror][layers][udp][udp_udp_srcport]}"
						"mirror_udp_dst_port" => "%{[honeypot_mirror][layers][udp][udp_udp_dstport]}"
					}
				}
				mutate {
					convert => {
						"mirror_udp_src_port" => "integer"
						"mirror_udp_dst_port" => "integer"
					}
				}
			}
			else if [honeypot_mirror][layers][icmp] {
				mutate {
					add_field => {
						"mirror_icmp_type" => "%{[honeypot_mirror][layers][icmp][icmp_icmp_type]}"
						"mirror_icmp_code" => "%{[honeypot_mirror][layers][icmp][icmp_icmp_code]}"
					}
				}
				translate {
					field => "mirror_icmp_type"
					destination => "mirror_icmp_type"
					override => "true"
					dictionary => ["0", "Echo Reply", "3", "Destination Unreachable", "8", "Echo"]
				}
				translate {
					field => "mirror_icmp_code"
					destination => "mirror_icmp_code"
					override => "true"
					dictionary => ["1", "Host Unreachable", "3", "Port Unrechable"]
				}
			}
		}
		else {
			drop {}
		}
		date {
			match => [ "[honeypot_mirror][timestamp]", "UNIX_MS"]
		}
		mutate {
			remove_field => ["message", "honeypot_mirror", "path"]
		}
	}

    if [type] == "honeypot_pcap" {

		if [message] =~ /^{.*}$/ {
			json {
				source => message
				target => "honeypot"
			}
		}

		# Check if the 'layers' field exists and only then mutate the data
		# We extract only required fields here
		mutate {
			replace => [ "message", "%{message}" ]
			gsub => [ 'message','\n','']
		}

		# If TCP layer is there, that means even IP would be there
		if [honeypot][layers][ip] {

			mutate {
				add_field => {
					"honeypot_src_ip" => "%{[honeypot][layers][ip][ip_ip_src]}"
					"honeypot_dst_ip" => "%{[honeypot][layers][ip][ip_ip_dst]}"
					"honeypot_ip_text" => "%{[honeypot][layers][ip][ip_text]}"
				}
			}

			geoip {
				source => "[honeypot][layers][ip][ip_ip_src]"
				target => "honeypot_src_geoip"
				fields => ["city_name", "continent_code", "country_name", "ip", "latitude", "longitude", "location"]
			}

			geoip {
				source => "[honeypot][layers][ip][ip_ip_dst]"
				target => "honeypot_dst_geoip"
				fields => ["city_name", "continent_code", "country_name", "ip", "latitude", "longitude", "location"]
			}

			cidr {
				address => [ "%{honeypot_dst_ip}" ]
				network => [ "10.0.64.0/18", "10.1.64.0/18", "169.254.0.0/16", "192.168.0.0/16", "fe80::/64" ]
				add_tag => [ "dst_ip_local" ]
			}

			if [honeypot][layers][tcp] {
				mutate {
					add_field => {
						"honeypot_tcp_src_port" => "%{[honeypot][layers][tcp][tcp_tcp_srcport]}"
						"honeypot_tcp_dst_port" => "%{[honeypot][layers][tcp][tcp_tcp_dstport]}"
						"honeypot_tcp_filtered" => "%{[honeypot][layers][tcp][filtered]}"
						"honeypot_tcp_flags"    => "%{[honeypot][layers][tcp][tcp_tcp_flags]}"
						"honeypot_tcp_stream"   => "%{[honeypot][layers][tcp][tcp_tcp_stream]}"
					}
				}
				mutate {
					convert => {
						"honeypot_tcp_src_port" => "integer"
						"honeypot_tcp_dst_port" => "integer"
					}
				}

				#translate {
				#	field => "honeypot_tcp_flags"
				#	destination => "honeypot_tcp_flags"
				#	override => "true"
				#	dictionary_path => "/home/honeypot/elk/logstash-7.5.0/config/tcp_flags_dict.yml"
				#}

				#if [honeypot_tcp_flags] == "SYN"  and !("dst_ip_local" in [tags])
				#{
		    	#	geoip {
		        #		source => "[honeypot][layers][ip][ip_ip_dst]"
				#		target => "honeypot_dst_geoip"
				#		fields => ["city_name", "continent_code", "country_name", "ip", "latitude", "longitude", "location"]
		    	#	}
				#}

				if [honeypot][layers][http] {
					if [honeypot][layers][http][http_http_authorization] {
						grok {
							match => ["[honeypot][layers][http][http_http_authorization]","%{GREEDYDATA} %{GREEDYDATA:honeypot_b64_http_creds}"]
						}
						ruby {
							init => "require 'base64'"
							code => "
								if event.get('honeypot_b64_http_creds')
								a = Base64.decode64(event.get('honeypot_b64_http_creds'))
								event.set('honeypot_http_creds', a)
							end"
						}

						# translate {
						#   field           => "wormhole_ip"
						#   destination     => "expected_creds"
						#   dictionary_path => "/home/honeypot/elk_530/logstash-5.3.0/config/yaml/wormhole_credentials.yml"
						# }
						# if [http_creds] != [expected_creds] {
						#   mutate {
						#      add_field => {
						#         "unsuccessful_login" => "%{[http_creds]}"
						#      }
						#   }
						# }
						# if [http_creds] == [expected_creds] {
						#   mutate {
						#     add_field => {
						#         "successful_login" => "%{[http_creds]}"
						#      }
						#   }
						# }

						mutate {
							add_field => {
								"honeypot_raw_http_data" => "%{[honeypot][layers][http]}"
							}
						}

					}

					if [honeypot][layers][http][http_http_request_full_uri] {
						mutate {
							add_field => {
								"honeypot_http_requested_uri" => "%{[honeypot][layers][http][http_http_request_full_uri]}"
							}
						}
					}

					if [honeypot][layers][http][http_http_user_agent] {
						mutate {
							add_field => {
								"honeypot_http_user_agent" => "%{[honeypot][layers][http][http_http_user_agent]}"
							}
						}
					}
				}
			}

			if [honeypot][layers][udp] {
				mutate {
					add_field => {
						"honeypot_udp_src_port" => "%{[honeypot][layers][udp][udp_udp_srcport]}"
						"honeypot_udp_dst_port" => "%{[honeypot][layers][udp][udp_udp_dstport]}"
					}
				}
				mutate {
					convert => {
						"honeypot_udp_src_port" => "integer"
						"honeypot_udp_dst_port" => "integer"
					}
				}
			}

			else if [honeypot][layers][icmp] {

				mutate {
					add_field => {
						"honeypot_icmp_type" => "%{[honeypot][layers][icmp][icmp_icmp_type]}"
						"honeypot_icmp_code" => "%{[honeypot][layers][icmp][icmp_icmp_code]}"
					}
				}

				translate {
					field => "honeypot_icmp_type"
					destination => "honeypot_icmp_type"
					override => "true"
					dictionary => ["0", "Echo Reply", "3", "Destination Unreachable", "8", "Echo"]
				}

				translate {
					field => "honeypot_icmp_code"
					destination => "honeypot_icmp_code"
					override => "true"
					dictionary => ["1", "Host Unreachable", "3", "Port Unrechable"]
				}
			}
		}
		else {
			drop {}
		}
		date {
			match => [ "[honeypot][timestamp]", "UNIX_MS"]
		}
		mutate {
			remove_field => ["message", "honeypot", "path"]
		}
	}	
}

output {
	#if [type] == "honeypot_mirroring" {
	#	elasticsearch {
	#		hosts => "localhost:9200"			
	#		#template => "/home/honeypot/elk/pipeline/honeypot-template.json"
	#		index => "honeypot-mirroring"
	#		codec => json
	#	}
	#}

        if [type] == "honeypot_mirroring" {
		elasticsearch {
			hosts => "localhost:9200"			
			#template => "/home/honeypot/elk/pipeline/honeypot-template.json"
			index => "hpot-mirroring"
			codec => json
		}
	}

	#if [type] == "honeypot_pcap" {
	#	elasticsearch {
	#		hosts    => "localhost:9200"
	#		#template => "/home/honeypot/elk/pipeline/honeypot-template.json"
	#		index    => "honeypot-pcap"
	#		codec    => json
	#	}
	#}

	if [type] == "honeypot_pcap" {
		elasticsearch {
			hosts    => "localhost:9200"
			#template => "/home/honeypot/elk/pipeline/honeypot-template.json"
			index    => "hpot-pcap"
			codec    => json
		}
	}

	#stdout {
	#	codec => rubydebug
	#}
}

